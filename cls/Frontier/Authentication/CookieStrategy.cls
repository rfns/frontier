/// This strategy can be used to validate tokens generated by the utility class
/// Frontier.Security.CookieSignature. When configuring this strategy, you just need
/// to provide the same secret used when signing the token.
Class Frontier.Authentication.CookieStrategy Extends Frontier.Authentication.Strategy
{

/// The name of the strategy.
Property Name As %String [ InitialExpression = "Cookie" ];

/// The cookie key to search for.
Property Key As %String [ InitialExpression = "__fc" ];

/// The same secret used to create the signed token.
Property Secret As %String [ Private ];

/// A classmethod that is used to validate the token AFTER it was unsigned.
/// This method is only called when the token has a valid signature.
Property Validator As %String;

Method %OnNew(config As %DynamicObject) As %Status
{
  set ..Secret = config.secret
  if config.%IsDefined("name") set ..Name = config.name
  if config.%IsDefined("key") set ..Key = config.key
  if config.%IsDefined("validator") set ..Validator = config.validator
  return $$$OK
}

/// Validates if the request contains the cookie, skips the check if the cookie is not present.
/// Otherwise attempts to unsign the token to obtain the value and pass it down to the Validator method.
Method Verify(session As %CSP.Session, request As %CSP.Request, response As %CSP.Response, Output user As %DynamicObject = {{}}, resourceScope As %String = "") As %Status
{
  set failed = 0
  #define ExpireCookie  do response.SetCookie(..Key,"",$zdt("0,0", 2)_" GMT")
  #define AssertPropertyDefined(%jp,%ip) if $p($this, %ip) = "" $$$ExpireCookie return $$$ERROR($$$GeneralError, $$$FormatText("Strategy '%1' requires '%1' property to be specified.", ..Name, %jp))

  $$$AssertPropertyDefined("validator", "Validator")
  $$$AssertPropertyDefined("key", "Key")
  $$$AssertPropertyDefined("secret", "Secret")

  if 'request.IsDefinedCookie(..Key) return $$$OK
  set token = request.GetCookie(..Key)
  set payload = ##class(Frontier.Security.CookieSignature).Unsign(token, ..Secret)

  if payload = "" {
    $$$ExpireCookie
    set response.Status = "401 Forbidden"
    return $$$ERROR($$$InvalidUsernameOrPassword)
  }

  $$$QuitOnError(##class(Frontier.Shared.Utilities).SafeClassMethodCall(..Validator, payload, .found, .httpStatus, .user))
  if found = 1 set ..Verified = 1
  return $$$OK
}

}
