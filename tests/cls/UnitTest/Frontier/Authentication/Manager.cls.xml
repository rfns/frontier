<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="UnitTest.Frontier.Authentication.Manager">
<Super>Port.UnitTest.TestCase</Super>
<TimeCreated>64560,42325.952774</TimeCreated>

<Property name="AuthenticationManager">
<Type>Frontier.Authentication.Manager</Type>
</Property>

<Property name="Request">
<Type>%CSP.Request</Type>
</Property>

<Property name="Response">
<Type>%CSP.Response</Type>
</Property>

<Property name="Session">
<Type>%CSP.Session</Type>
</Property>

<Method name="OnBeforeOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..Session = ##class(%CSP.Session).%New("t3st1ng")
  set ..Request = ##class(%CSP.Request).%New()
  set ..Response = ##class(%CSP.Response).%New()
  set context = ##class(Frontier.Context).%New(..Session, ..Request, ..Response)
  set ..AuthenticationManager = context.AuthenticationManager  
  return $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..Request = ""
  set ..Response = ""
  set ..Session = ""
  set ..AuthenticationManager = ""
  return $$$OK
]]></Implementation>
</Method>

<Method name="TestVerify">
<Implementation><![CDATA[
  // This will fail but move to the next strategy. The Next flag indicates that there
  // isn't enough info about the authentication method to decide a strategy thus making the manager ignores it.
  set dummyStrategy1 = ##class(Frontier.UnitTest.Authentication.DummyStrategy).%New()
  set dummyStrategy1.ShouldPass = 0
  set dummyStrategy1.Next = 1
  
  // Same here.
  set dummyStrategy2 = ##class(Frontier.UnitTest.Authentication.DummyStrategy).%New()
  set dummyStrategy2.ShouldPass = 0
  set dummyStrategy2.Next = 1
  
  // If the flag is not set, then it'll validate the input.
  // Luckly, we're informing our dummy strategy that it should allow the access.
  set dummyStrategy3 = ##class(Frontier.UnitTest.Authentication.DummyStrategy).%New()
  set dummyStrategy3.ShouldPass = 1
  
  do ..AuthenticationManager.AddStrategy(dummyStrategy1)  
  do ..AuthenticationManager.AddStrategy(dummyStrategy2)
  do ..AuthenticationManager.AddStrategy(dummyStrategy3)
  
  set sc = ..AuthenticationManager.Verify(.user)  
  
  do $$$AssertStatusOK(sc, "allows access")
  
  do $$$AssertTrue(..Response.GetHeader("WWW-Authenticate") = "", "doesn't include the challenge if one strategy works.")
  
  set dummyStrategy4 = ##class(Frontier.UnitTest.Authentication.DummyStrategy).%New()
  set dummyStrategy4.ShouldPass = 0
  
  do ..AuthenticationManager.AddStrategy(dummyStrategy4)  
  
  set sc = ..AuthenticationManager.Verify(.user)
  do $$$AssertStatusOK(sc, "skips pending strategies if one works")
  
  // This time we're forcing our passing strategy to fail, and there's no Next flag
  // so assume that the user sent us a valid authentication but the credentials are
  // not what we expected.
  set dummyStrategy3.ShouldPass = 0
  
  set sc = ..AuthenticationManager.Verify(.user)
  
  do $$$AssertEquals(user.name, "", "always return an user object even if empty")
  do $$$AssertStatusNotOK(sc, "returns the last strategy error")
  
  // Now we have the WWW-Authenticate header set.
  do $$$AssertTrue(..Response.GetHeader("WWW-Authenticate") '= "", "outputs the challenge when none of the provided strategies succeed.")
]]></Implementation>
</Method>
</Class>
</Export>
