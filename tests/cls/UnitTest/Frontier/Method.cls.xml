<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="UnitTest.Frontier.Method">
<Super>Port.UnitTest.TestCase</Super>
<TimeCreated>64502,36000.645679</TimeCreated>

<Method name="TestDescribeArguments">
<Implementation><![CDATA[
  set sc = $$$OK
  do $$$AssertStatusNotOK(##class(Frontier.Method).DescribeArguments($classname(), "DescribeMyArgumentsWHOOPS"), "returns an error if class and method doesn't exists")
  do $$$AssertStatusOK(##class(Frontier.Method).DescribeArguments($classname(), "DescribeMyArguments", .arguments), "returns $$$OK if they do") 
  
  do $$$AssertTrue($isobject(arguments) && arguments.%Extends("%Collection.AbstractList"), "returns a %ListOfObjects when $$$OK")
  
  set expecations = $lb(
    $lb("parameterA", "%String", "", 0),
    $lb("parameterB", "%String", """default""", 0),
    $lb("parameterC", "%Library.Integer", 0, 0),
    $lb("parameterD", "%Boolean", "$$$OK", 0),
    $lb("parameterE", "%Dictionary.CompiledClass", $classname(), 0),
    $lb("parameterE", "%Integer", "", 1)
  )
  
  for i=1:1:arguments.Count() {
    set argument = $lg(expecations, i)
    set name = $lg(argument, 1)
    set type = $lg(argument, 2)
    set defaultValue = $lg(argument, 3)
    set arity = $lg(argument, 4)
    set expected = ""
    
    set describedArgument = arguments.GetAt(i)
    
    for v = name, type, defaultValue, arity {
      if v = name set expected = describedArgument.Name set property = "Name"
      if v = type set expected = describedArgument.Type set property = "Type"
      if v = defaultValue set expected = describedArgument.DefaultValue set property = "DefaultValue"
      if v = arity set expected = describedArgument.Arity set property = "Arity"
      
      set equals = (v = expected)
      if 'equals {
        set sc = $$$ERROR($$$GeneralError, $$$FormatText("property value doesn't match for %1, where %2 values mismatch: %3 '= %4", name, property, v, expected))
        quit
      }         
    }
  }
  do $$$AssertStatusOK(sc, "can describe arguments correctly")
]]></Implementation>
</Method>

<Method name="DescribeMyArguments">
<FormalSpec>parameterA:%String,parameterB:%String="default",parameterC:%Library.Integer=0,parameterD:%Boolean=$$$OK,parameterE:%Dictionary.CompiledClass=$classname(),parameterF...:%Integer</FormalSpec>
<Implementation><![CDATA[
  set ^||Port.Spy("DescribeMyArguments", 1) = parameterA
  set ^||Port.Spy("DescribeMyArguments", 2) = parameterB
  set ^||Port.Spy("DescribeMyArguments", 2) = parameterC
  set ^||Port.Spy("DescribeMyArguments", 3) = parameterD
  set ^||Port.Spy("DescribeMyArguments", 4) = parameterE
  set ^||Port.Spy("DescribeMyArguments", 5) = parameterF
]]></Implementation>
</Method>
</Class>
</Export>
