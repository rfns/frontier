<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="UnitTest.Frontier.Reporter.Manager">
<Super>Port.UnitTest.TestCase</Super>
<TimeCreated>64540,38890.678512</TimeCreated>

<Property name="Context">
<Type>Frontier.Context</Type>
</Property>

<Property name="ReporterManager">
<Type>Frontier.Reporter.Manager</Type>
</Property>

<Property name="SetupStatuses">
<Type>%Status</Type>
<InitialExpression>$lb(1, ..CreateError(), 1, 1, ..CreateError(), ..CreateError())</InitialExpression>
</Property>

<Property name="ReportStatuses">
<Type>%Status</Type>
<InitialExpression>$lb(..CreateError(), ..CreateError(), ..CreateError(), 1, 1)</InitialExpression>
</Property>

<Property name="MockIds">
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Method name="OnBeforeOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set session = ##class(%CSP.Session).%New("t3st1ng")
  set request = ##class(%CSP.Request).%New()
  set response = ##class(%CSP.Response).%New()
  set ..Context = ##class(Frontier.Context).%New(session, request, response)
  set ..Context.Error = ..CreateError()
  set ..ReporterManager = ..Context.ReporterManager
  return $$$OK
]]></Implementation>
</Method>

<Method name="CreateError">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  return $$$ERROR($$$GeneralError, "dummy error")
]]></Implementation>
</Method>

<Method name="OnAfterOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..ReporterManager = ""
  set ..Context = ""
  kill ..MockIds
  return $$$OK
]]></Implementation>
</Method>

<Method name="TestAddReporter">
<FormalSpec>skipAssertion:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  for i=1:1:$ll(..SetupStatuses) {
    set expectedSetupStatus = $lg(..SetupStatuses, i)
    set expectedReportStatus = $lg(..ReportStatuses, i)
    set mockReporter = ##class(Frontier.UnitTest.Reporter.Mock).%New()
    set ..MockIds(i) = mockReporter
    set mockReporter.ExpectedSetupStatus = expectedSetupStatus
    set mockReporter.ExpectedReportStatus = expectedReportStatus
    set returnedStatus = ..ReporterManager.AddReporter(mockReporter)
    set matchInstance = (^||Frontier.UnitTest.Spy("Setup", ..MockIds(i)) '= "")
    if 'skipAssertion {
      if (returnedStatus '= expectedSetupStatus) return $$$AssertTrue(0, "returns each reporter's Setup status")      
      if 'matchInstance return $$$AssertTrue(matchInstance, "Report received context.")
    }
  }
  return $$$OK
]]></Implementation>
</Method>

<Method name="TestReport">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  set sc = ..TestAddReporter(1)
  if $$$ISERR(sc) return $$$AssertSkipped("failed to add dummy reporters")
  
  set sc = ..ReporterManager.Report()
  set errorCount = $$$GETERRORCOUNT(sc)
  
  // 2 because Setup failures nullify reporters so they never can be used.
  // We actually have only 2 reporters added.
  if errorCount '= 2 do $$$AssertTrue(errorCount '= 2, "appends reporter errors.")
  
  for i=1:1:$ll(..ReportStatuses) {
    
    // Skip reports that couldn't be added. We only need to know about reporters ready to call the Report method.
    // Even if the Report method fails itself.
    if $data(^||Frontier.UnitTest.Spy("Report", ..MockIds(i))) {
      set matchInstance = (^||Frontier.UnitTest.Spy("Report", ..MockIds(i)) '= "")
      if 'matchInstance return $$$AssertTrue(matchInstance, "Report received context.")
    }
  }
]]></Implementation>
</Method>
</Class>
</Export>
