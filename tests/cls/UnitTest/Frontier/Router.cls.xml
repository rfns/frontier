<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="UnitTest.Frontier.Router">
<Super>Port.UnitTest.TestCase</Super>
<TimeCreated>64499,42651.978954</TimeCreated>

<Parameter name="TESTSERVER">
<Default>localhost</Default>
</Parameter>

<Parameter name="TESTSERVERPORT">
<Default>57772</Default>
</Parameter>

<Property name="Request">
<Type>%Net.HttpRequest</Type>
</Property>

<Property name="Class">
<Type>Frontier.UnitTest.Fixtures.Class</Type>
</Property>

<Property name="Student">
<Type>Frontier.UnitTest.Fixtures.Student</Type>
</Property>

<Method name="OnAfterAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$QuitOnError(##class(Frontier.UnitTest.Util).CreateWebApp())
  $$$QuitOnError(##class(Frontier.UnitTest.Fixtures.Class).%KillExtent())
  return ##class(Frontier.UnitTest.Fixtures.Student).%KillExtent()
]]></Implementation>
</Method>

<Method name="OnBeforeAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$QuitOnError(##class(Frontier.UnitTest.Util).CreateWebApp())
  do ##class(Frontier.UnitTest.Fixtures.Class).Populate()
  do ##class(Frontier.UnitTest.Fixtures.Student).Populate()
  
  &sql(SELECT TOP 1 ID INTO :classId FROM FRONTIER_UNITTEST_FIXTURES.CLASS)
  &sql(SELECT TOP 1 ID INTO :studentId FROM FRONTIER_UNITTEST_FIXTURES.STUDENT)
  
  set ..Class = ##class(Frontier.UnitTest.Fixtures.Class).%OpenId(classId)
  set ..Student = ##class(Frontier.UnitTest.Fixtures.Student).%OpenId(studentId)
  
  return $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..Request = ##class(%Net.HttpRequest).%New()
  do ..Request.SetHeader("Content-Type", "application/json; charset=utf-8")
  set ..Request.Server = ..#TESTSERVER
  set ..Request.Port = ..#TESTSERVERPORT
  return $$$OK
]]></Implementation>
</Method>

<Method name="TestGETRouteParams">
<Implementation><![CDATA[
  do ##class(Frontier.Dynamic.Marshaller).Marshall(..Class, .expected)
  
  set sc = ..Request.Get("api/frontier/test/route_params/"_..Class.%Id())
  if $$$ISERR(sc) return $$$AssertStatusOK(sc, "can call the resource")
  
  set response = ##class(%DynamicObject).%FromJSON(..Request.HttpResponse.Data)
  
  if $isobject(response) {
    if response.errors {
      set sc = ##class(Frontier.UnitTest.Util).MergeErrors(response.errors)
    } else {
      set response = response.Read()
      if response '= expected.%ToJSON() {
        set sc = $$$ERROR($$$GeneralError, "The content received mismatches with the expected one.")
      }
    }
  }
  
  return $$$AssertStatusOK(sc, "can retrieve the expected data from the resource /route_params/"_..Class.%Id())
]]></Implementation>
</Method>

<Method name="test">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set t = ..%New(##class(Port.UnitTest.Manager).%New())
  $$$QuitOnError(t.OnBeforeAllTests())
  $$$QuitOnError(t.OnBeforeOneTest())
  $$$QuitOnError(t.TestGETRouteParams())
  $$$QuitOnError(t.OnAfterOneTest())
  $$$QuitOnError(t.OnAfterAllTests())
  return $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
